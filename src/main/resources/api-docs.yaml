openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /v1/auth/sign-up:
    post:
      tags:
        - user-controller
      summary: Register a new user
      description: Register a new user with the information provided.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        "500":
          description: Internal Server Error.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: "Success, returns the registered user and the token of the\
            \ logged in user."
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
  /v1/auth/login:
    post:
      tags:
        - user-controller
      summary: Log in
      description: Sign in with the provided credentials.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "500":
          description: Internal Server Error.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: "Not found, user not found."
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Unauthorized, incorrect credentials."
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: "Success, returns the token of the logged in user."
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
  /v1/auth:
    get:
      tags:
        - user-controller
      summary: Get all users
      description: Retrieves the complete list of users.
      operationId: getAllUsers
      responses:
        "500":
          description: Internal Server Error.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: "Success, returns the list of users. If there are no users,\
            \ it returns an empty list"
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
      security:
        - Bearer Authentication: [ ]
  /v1/auth/{userUUID}:
    get:
      tags:
        - user-controller
      summary: Get User by id
      description: Retrieves a user by its UUID .Need a token generated upon login
        or registration.
      operationId: getUserByUUID
      parameters:
        - name: userUUID
          in: path
          description: The identifier code
          required: true
          schema:
            type: string
          example: e58ed763-928c-4155-bee9-fdbaaadc15f3
      responses:
        "500":
          description: Internal Server Error.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: "Not found, task not found."
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: "Success, return the task."
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
      security:
        - Bearer Authentication: [ ]
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
    PhoneDTO:
      type: object
      properties:
        number:
          type: string
        citycode:
          type: string
        contrycode:
          type: string
    UserRequest:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
        email:
          type: string
        phones:
          type: array
          items:
            $ref: '#/components/schemas/PhoneDTO'
    UserDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
        phones:
          type: array
          items:
            $ref: '#/components/schemas/PhoneDTO'
        created:
          type: string
        modified:
          type: string
        lastLogin:
          type: string
        token:
          type: string
        active:
          type: boolean
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
